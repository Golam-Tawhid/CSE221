from collections import defaultdict, deque

def bfs(graph, start):
    queue = deque()
    visited = [False] * (len(graph) + 1)
    distance = [0] * (len(graph) + 1)

    queue.append(start)
    visited[start] = True

    while queue:
        current = queue.popleft()

        for neighbor in graph[current]:
            if not visited[neighbor]:
                queue.append(neighbor)
                visited[neighbor] = True
                distance[neighbor] = distance[current] + 1

    return distance


# Read input
N = int(input())

# Build the undirected graph
graph = defaultdict(list)
for _ in range(N - 1):
    u, v = map(int, input().split())
    graph[u].append(v)
    graph[v].append(u)

# Choose a leaf node as one of the cities (city A)
leaf_nodes = [node for node in graph if len(graph[node]) == 1]
city_A = leaf_nodes[0]

# Find the farthest node from city A as the other city (city B)
distances = bfs(graph, city_A)
city_B = max(range(1, N + 1), key=lambda node: distances[node])

# Print the cities A and B
print(city_A, city_B)
